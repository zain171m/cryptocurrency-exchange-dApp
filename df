[1mdiff --git a/contracts/Token.sol b/contracts/Token.sol[m
[1mindex 6bd3d73..857b8eb 100644[m
[1m--- a/contracts/Token.sol[m
[1m+++ b/contracts/Token.sol[m
[36m@@ -14,6 +14,12 @@[m [mcontract Token {[m
     mapping(address => uint256) public balanceOf;[m
     //Send Tokens[m
 [m
[32m+[m[32m    event Transfer([m
[32m+[m[32m    address indexed from,[m
[32m+[m[32m    address indexed to,[m[41m [m
[32m+[m[32m    uint256 value[m
[32m+[m[32m    );[m
[32m+[m
 [m
     constructor([m
         string memory _name, [m
[36m@@ -33,10 +39,18 @@[m [mcontract Token {[m
      public [m
      returns (bool success)[m
      {[m
[32m+[m[32m        // Require that sender has enough tokens to spend[m
[32m+[m[32m        require(balanceOf[msg.sender]  >= _value);[m
[32m+[m[32m        require(_to != address(0));[m
[32m+[m[41m        [m
         // Deduct tokens from spender[m
         balanceOf[msg.sender] = balanceOf[msg.sender] - _value;[m
         // Credit token to reciever[m
         balanceOf[_to] = balanceOf[_to ] + _value;[m
[32m+[m
[32m+[m[32m        //Emit the transfer event[m
[32m+[m[32m        emit Transfer(msg.sender, _to , _value);[m
[32m+[m
         return true;[m
     }[m
 }[m
[1mdiff --git a/test/Token.js b/test/Token.js[m
[1mindex 4d73d6b..5b2103a 100644[m
[1m--- a/test/Token.js[m
[1m+++ b/test/Token.js[m
[36m@@ -53,17 +53,43 @@[m [mdescribe('Token', () => {[m
     })[m
 [m
     describe('Sending Token',() => {[m
[31m-        let amount [m
[32m+[m[32m        let amount, transaction, result[m
[32m+[m[32m        describe('Success',() => {[m
[32m+[m[32m            beforeEach(async()=>{[m
[32m+[m[32m                amount = tokens(100)[m
[32m+[m[32m                transaction = await token.connect(deployer).transfer(receiver.address, amount)[m
[32m+[m[32m                result = await transaction.wait()[m[41m [m
[32m+[m[32m            })[m
 [m
[31m-        beforeEach(async()=>{[m
[31m-            amount = tokens(100)[m
[31m-            let transaction = await token.connect(deployer).transfer(receiver.address, amount)[m
[31m-            let result = transaction.wait() [m
[32m+[m[32m            it('transfers token balances', async()=>{[m[41m          [m
[32m+[m[32m                expect(await token.balanceOf(deployer.address)).to.equal(tokens(999900))[m
[32m+[m[32m                expect(await token.balanceOf(receiver.address)).to.equal(amount)[m[41m    [m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m            it('emits a transfer event', async() => {[m
[32m+[m[32m                const event = result.events[0][m
[32m+[m[32m                expect(event.event).to.equal('Transfer')[m
[32m+[m[32m                const args = event.args[m
[32m+[m[32m                expect(args.from).to.equal(deployer.address)[m
[32m+[m[32m                expect(args.to).to.equal(receiver.address)[m
[32m+[m[32m                expect(args.value).to.equal(amount)[m
[32m+[m[32m            })[m
         })[m
 [m
[31m-        it('Transfers token balances', async()=>{          [m
[31m-            expect(await token.balanceOf(deployer.address)).to.equal(tokens(999900))[m
[31m-            expect(await token.balanceOf(receiver.address)).to.equal(amount)    [m
[32m+[m[32m        describe('Failure', () => {[m
[32m+[m[32m            it('rejects insufficient balances', async()=>{[m
[32m+[m[32m                //Transfer more tokens than deployer has -10M[m
[32m+[m[32m                const invalidAmount = tokens(100000000)[m
[32m+[m[32m                await expect(token.connect(deployer).transfer(receiver.address, invalidAmount)).to.be.reverted[m
[32m+[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m            it('has valid recipient', async()=>{[m
[32m+[m[32m                //Transfer more tokens than deployer has -10M[m
[32m+[m[32m                const amount = tokens(100)[m
[32m+[m[32m                await expect(token.connect(deployer).transfer('0x0000000000000000000000000000000000000000' , amount)).to.be.reverted[m[41m              [m
[32m+[m[32m            })[m
         })[m
[32m+[m
     })[m
 })[m
\ No newline at end of file[m
